name: Ejecutar Asistente Automatizado

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  run-asistente:
    runs-on: ubuntu-latest

    steps:
    # 1. Clonar el repositorio
    - name: Clonar el repositorio
      uses: actions/checkout@v3

    # 2. Configurar Python
    - name: Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    # 3. Instalar dependencias
    - name: Instalar dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    # 4. Verificar secretos (Incluyendo NGROK_AUTH_TOKEN)
    - name: Verificar secretos
      run: |
        echo "Verificando secretos configurados..."
        if [[ -z "${{ secrets.NGROK_AUTH_TOKEN }}" ]]; then
          echo "ERROR: NGROK_AUTH_TOKEN no está configurado."
          exit 1
        fi
        if [[ -z "${{ secrets.OPENAI_API_KEY }}" ]]; then
          echo "ERROR: OPENAI_API_KEY no está configurado."
          exit 1
        fi
        echo "Todos los secretos están configurados correctamente."

    # 5. Instalar y configurar ngrok
    - name: Instalar y configurar ngrok
      run: |
        # Instalar ngrok
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list >/dev/null
        sudo apt update
        sudo apt install -y ngrok
        
        # Configurar authtoken de ngrok
        echo "Autenticando ngrok con el token proporcionado..."
        ngrok authtoken "${{ secrets.NGROK_AUTH_TOKEN }}"
        
        # Iniciar ngrok y exponer el puerto 5000
        nohup ngrok http 5000 > ngrok.log &
        sleep 10

    # 6. Obtener URL pública de ngrok y configurar como variable de entorno
    - name: Obtener URL pública de ngrok
      id: obtener_url_ngrok
      run: |
        echo "Obteniendo la URL pública de ngrok..."
        export NGROK_URL=$(curl -s http://127.0.0.1:4040/api/tunnels | jq -r '.tunnels[0].public_url')
        echo "NGROK_URL=$NGROK_URL" >> $GITHUB_ENV
        echo "URL pública de ngrok: $NGROK_URL"

    # 7. Configurar variables de entorno para el asistente
    - name: Configurar variables de entorno
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        BILLAGE_API_KEY: ${{ secrets.BILLAGE_API_KEY }}
        IMAP_SERVER: ${{ secrets.IMAP_SERVER }}
        IMAP_USER: ${{ secrets.IMAP_USER }}
        IMAP_PASSWORD: ${{ secrets.IMAP_PASSWORD }}
        TWILIO_WHATSAPP_NUMBER: ${{ secrets.TWILIO_WHATSAPP_NUMBER }}
        TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
        TWILIO_AUTH_TOKEN: ${{ secrets.TWILIO_AUTH_TOKEN }}
        NGROK_URL: ${{ env.NGROK_URL }}
      run: |
        echo "Configurando archivo .env con las variables necesarias..."
        echo "OPENAI_API_KEY=$OPENAI_API_KEY" > .env
        echo "BILLAGE_API_KEY=$BILLAGE_API_KEY" >> .env
        echo "IMAP_SERVER=$IMAP_SERVER" >> .env
        echo "IMAP_USER=$IMAP_USER" >> .env
        echo "IMAP_PASSWORD=$IMAP_PASSWORD" >> .env
        echo "TWILIO_WHATSAPP_NUMBER=$TWILIO_WHATSAPP_NUMBER" >> .env
        echo "TWILIO_ACCOUNT_SID=$TWILIO_ACCOUNT_SID" >> .env
        echo "TWILIO_AUTH_TOKEN=$TWILIO_AUTH_TOKEN" >> .env
        echo "NGROK_URL=$NGROK_URL" >> .env
        echo "Archivo .env configurado exitosamente."

    # 8. Ejecutar el servidor Flask
    - name: Ejecutar Flask
      env:
        NGROK_URL: ${{ env.NGROK_URL }}
      run: python app.py
